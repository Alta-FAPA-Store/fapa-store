package mocks

import (
	category "go-hexagonal/business/category"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

func (_m *Repository) FindCategoryByID(id int) (*category.Category, error) {
	ret := _m.Called(id)

	var r0 *category.Category
	if rf, ok := ret.Get(0).(func(int) *category.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Repository) FindAllCategory(skip, rowPerPage int) ([]category.Category, error) {
	ret := _m.Called(skip, rowPerPage)

	var r0 *[]category.Category
	if rf, ok := ret.Get(0).(func(int, int) *[]category.Category); ok {
		r0 = rf(skip, rowPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]category.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(skip, rowPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return *r0, r1
}

func (_m *Repository) InsertCategory(_a0 category.Category) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(category.Category) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Repository) UpdateCategory(_a0 category.Category) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(category.Category) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Repository) DeleteCategory(categoryId int) error {
	ret := _m.Called(categoryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(categoryId int) error); ok {
		r0 = rf(categoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
