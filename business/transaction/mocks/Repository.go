package mocks

import (
	"go-hexagonal/business/transaction"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

func (_m *Repository) GetAllTransaction(userId int, limit int, offset int) ([]transaction.Transaction, error) {
	ret := _m.Called(userId, limit, offset)

	var r0 *[]transaction.Transaction
	if rf, ok := ret.Get(0).(func(int, int, int) *[]transaction.Transaction); ok {
		r0 = rf(userId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]transaction.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(userId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return *r0, r1
}

func (_m *Repository) GetTransactionDetails(transactionId int) (*transaction.Transaction, error) {
	ret := _m.Called(transactionId)

	var r0 *transaction.Transaction
	if rf, ok := ret.Get(0).(func(int) *transaction.Transaction); ok {
		r0 = rf(transactionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Repository) CreateTransaction(_a0 transaction.Transaction) (int, error) {
	ret := _m.Called(_a0)

	var r0 transaction.Transaction
	if rf, ok := ret.Get(0).(func(transaction.Transaction) transaction.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transaction.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(0)
	}

	return r0.Id, r1
}

func (_m *Repository) UpdateTransaction(transactionId int, status string) error {
	return nil
}

func (_m *Repository) UpdatePaymentUrlTransaction(transactionId int, paymentUrl string) error {
	return nil
}

func (_m *Repository) DeleteTransaction(transactionId int) error {
	return nil
}

func (_m *Repository) GetMidtransPaymentRequest(transactionId int, createTransactionSpec transaction.CreateTransactionSpec) (transaction.MidtransCreatePaymentRequest, error) {
	ret := _m.Called(transactionId, createTransactionSpec)

	var r0 transaction.MidtransCreatePaymentRequest
	if rf, ok := ret.Get(0).(func(int, transaction.CreateTransactionSpec) transaction.MidtransCreatePaymentRequest); ok {
		r0 = rf(transactionId, createTransactionSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transaction.MidtransCreatePaymentRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, transaction.CreateTransactionSpec) error); ok {
		r1 = rf(transactionId, createTransactionSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
