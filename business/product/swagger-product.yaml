swagger: "2.0"
info:
  description: "This is a Fapa Store User API."
  version: "1.0.0"
  title: "Fapa-Store RESTful API"
  termsOfService: "http://fapa-strore.com"
  contact:
    name: Developer
    email: "fadel.lukman.dev@gmil.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "fapa-strore.com"
basePath: "/v1"
tags:
- name: "product"
  description: "Everything about your Product"
schemes:
- "https"
- "http"
paths:
  /product:
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        # "200":
        #   description: "successful operation"
        #   schema:
        #     $ref: "#/definitions/ApiResponse"
        "405":
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:product"
        - "read:product"
  /product/findByCategory:
    get:
      tags:
      - "product"
      summary: "Finds Products by category"
      description: "Multiple category values can be provided with comma separated strings"
      operationId: "findProductsBycategory"
      produces:
      - "application/json"
      parameters:
      - name: "category"
        in: "query"
        description: "category values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          # enum:
          # - "available"
          # - "pending"
          # - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "400":
          description: "Invalid category value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findByName:
    get:
      tags:
      - "product"
      summary: "Finds Products by name"
      description: "Muliple name can be provided with comma separated strings. Use name1, name2, name3 for testing."
      operationId: "findProductsByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "400":
          description: "Invalid tag value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
      deprecated: false
  /product/{productId}:
    get:
      tags:
      - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
      - api_key: []
    put:
      tags:
      - "product"
      summary: "Updates a product in the store with form data"
      description: ""
      operationId: "updateProductWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "405":
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
    delete:
      tags:
      - "product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/json"
      parameters:
      # - name: "api_key"
      #   in: "header"
      #   required: false
      #   type: "string"
      - name: "productId"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/{productId}/uploadImage:
    post:
      tags:
      - "product"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
securityDefinitions:
  productstore_auth:
    type: "oauth2"
    authorizationUrl: "http://fapa-store.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:product: "modify product in your account"
      read:product: "read your product"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Product:
    type: "object"
    required:
    - "name"
    - "photo_urls"
    - "price"
    - "stock"
    properties:
      id:
        type: "integer"
        format: "int64"
      category_id:
        type: "integer"
        items: 
         $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Lenovo Legion"
      description:
        type: "string"
        example: ""
      stock:
        type: "integer"
        example: 5
      price:
        type: "integer"
        format: "int64"
        example: 200000
      photo_urls:
        type: "string"
        items:
          type: "string"
      status:
        type: "string"
        description: "product status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Product"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        enum:
          - 200
      type:
        type: "string"
      message:
        type: "string"
        enum:
          - "success"
